var Collider={init:function(e){Collider.playerCollisionMesh=BABYLON.MeshBuilder.CreateBox("pc",{size:.5,height:.6},e),Collider.playerCollisionMesh.position.y=.3,Collider.playerCollisionMesh.bakeCurrentTransformIntoVertices(),Collider.playerCollisionMesh.setEnabled(!1),Collider.wedgeCollisionMesh=BABYLON.MeshBuilder.CreateBox("",{size:1.5},e),Collider.wedgeCollisionMesh.position.y=-.75,Collider.wedgeCollisionMesh.bakeCurrentTransformIntoVertices(),Collider.wedgeCollisionMesh.rotation.x=-Math.PI/4,Collider.wedgeCollisionMesh.bakeTransformIntoVertices(Collider.wedgeCollisionMesh.getWorldMatrix()),Collider.wedgeCollisionMesh.setEnabled(!1),Collider.iwedgeCollisionMesh=BABYLON.MeshBuilder.CreateBox("",{size:1.5},e),Collider.iwedgeCollisionMesh.position.y=.75,Collider.iwedgeCollisionMesh.bakeCurrentTransformIntoVertices(),Collider.iwedgeCollisionMesh.rotation.x=-Math.PI/4,Collider.iwedgeCollisionMesh.bakeTransformIntoVertices(Collider.iwedgeCollisionMesh.getWorldMatrix()),Collider.iwedgeCollisionMesh.setEnabled(!1),Collider.fullCollisionMesh=BABYLON.MeshBuilder.CreateBox("",{size:1},e),Collider.fullCollisionMesh.setEnabled(!1),Collider.pointCollisionMesh=BABYLON.MeshBuilder.CreateBox("point",{size:.01},e),Collider.pointCollisionMesh.setEnabled(!1)},v1:new BABYLON.Vector3,v2:new BABYLON.Vector3,v3:new BABYLON.Vector3,v4:new BABYLON.Vector3,v5:new BABYLON.Vector3,ray:new BABYLON.Ray(BABYLON.Vector3.Zero(),BABYLON.Vector3.Zero(),1),matrix:new BABYLON.Matrix,pointCollidesWithMap:function(e,r){if(isNaN(e.x)||isNaN(e.y)||isNaN(e.z))return!1;var i=Math.floor(e.x),l=Math.floor(e.y),o=Math.floor(e.z);return!(i<0)&&!(i>=map.width)&&!(o<0)&&!(o>=map.depth)&&!(l<0)&&!(l>=map.height)&&Collider.meshCollidesWithCell(Collider.pointCollisionMesh,e,i,l,o,r)},playerCollidesWithMap:function(e){return Collider.meshCollidesWithMap(Collider.playerCollisionMesh,e)},meshCollidesWithMap:function(e,r){var i={};if(isNaN(r.x)||isNaN(r.y)||isNaN(r.z))return!0;for(var l=e.getBoundingInfo().boundingBox,o=0;o<l.vectors.length;o++){var t=Math.floor(r.x+l.vectors[o].x),n=Math.floor(r.y+l.vectors[o].y),d=Math.floor(r.z+l.vectors[o].z);if(t<0||t>=map.width||d<0||d>=map.depth||n<0)return!0;var a=t+1e3*n+1e6*d;if(n<map.height&&!i[a]){var s=Collider.meshCollidesWithCell(e,r,t,n,d);if(s)return s;i[a]=!0}}return!1},meshCollidesWithCell:function(e,r,i,l,o,t){var n=map.data[i][l][o];if(n.idx){var d=mapMeshes[n.idx];if(t&&d.softness)return!1;switch(d.colliderType){case"full":return{x:i,y:l,z:o,cell:n,mesh:Collider.fullCollisionMesh};case"ladder":if("pc"!=e.name)return!1;break;case"none":return!1}e.position.x=r.x-i-.5,e.position.y=r.y-l-.5,e.position.z=r.z-o-.5,Collider.v1.set(-e.position.x,-e.position.y,-e.position.z),e.setPivotPoint(Collider.v1),e.rotation.x=-n.rx,e.rotation.y=-n.ry,e.rotation.z=-n.rz,e.computeWorldMatrix();var a=n.colliderMesh.intersectsMesh(e,n.colliderPrecise,n.colliderChildren);if(a)return{x:i,y:l,z:o,cell:n,mesh:a}}return!1},rayCollidesWithMap:function(e,r,i){if(isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x<0||e.x>=map.width||e.z<0||e.z>=map.depth||e.y<0||e.y>=map.height)return!1;var l=r.length(),o=Math.floor(e.x),t=Math.floor(e.y),n=Math.floor(e.z),d=r.x,a=r.y,s=r.z,C=Math.sign(d),c=Math.sign(a),h=Math.sign(s),y=Collider.intbound(e.x,d),f=Collider.intbound(e.y,a),u=Collider.intbound(e.z,s),v=C/d,$=c/a,p=h/s;if(0===d&&0===a&&0===s)return!1;for(l/=Math.sqrt(d*d+a*a+s*s);(C>0?o<map.width:o>=0)&&(c>0?t<map.height:t>=0)&&(h>0?n<map.depth:n>=0);){if(!(o<0||t<0||n<0||o>=map.width||t>=map.height||n>=map.depth)){var m=i(e,r,{x:o,y:t,z:n});if(m&&"verysoft"!=mapMeshes[m.cell.idx].softness)return m}if(y<f){if(y<u){if(y>l)break;o+=C,y+=v}else{if(u>l)break;n+=h,u+=p}}else if(f<u){if(f>l)break;t+=c,f+=$}else{if(u>l)break;n+=h,u+=p}}},intbound:function(e,r){return r<0?Collider.intbound(-e,-r):(1-(e=(e%1+1)%1))/r},getCellForRay:function(e){try{var r=map.data[e.x][e.y][e.z]}catch(i){console.log(e)}if(!r||!r.mesh)return!1;switch(r.mesh.colliderType){case"none":case"ladder":return!1}return r},projectileCollidesWithCell:function(e,r,i){var l=Collider.getCellForRay(i);if(!l||l.mesh.softness)return!1;colliderMesh=l.colliderMesh,Collider.matrix.copyFrom(l.colliderMatrix),Collider.v4.set(i.x+.5,i.y+.5,i.z+.5),Collider.v1.set(e.x,e.y,e.z),Collider.v2.copyFrom(r),Collider.v1.subtractInPlace(Collider.v4),Collider.ray.origin.copyFrom(Collider.v1),Collider.ray.direction.copyFrom(Collider.v2),Collider.ray.length=1,BABYLON.Ray.TransformToRef(Collider.ray,Collider.matrix,Collider.ray);var o=Collider.intersectsColliderMesh(colliderMesh,!1);if(colliderMesh=o.pickedMesh,o.hit){if(colliderMesh!=Collider.fullCollisionMesh&&(Math.abs(o.pickedPoint.x)>.5||Math.abs(o.pickedPoint.y)>.5||Math.abs(o.pickedPoint.z)>.5)){var t=BABYLON.Vector3.DistanceSquared(Collider.ray.origin,BABYLON.Vector3.Zero());BABYLON.Vector3.DistanceSquared(Collider.ray.origin,o.pickedPoint)<t&&(o=Collider.ray.intersectsMesh(Collider.fullCollisionMesh,!1))}if(o.hit){var n=BABYLON.Vector3.TransformCoordinates(o.pickedPoint,Collider.matrix.invert());return n.addInPlace(Collider.v4),o.pickedPoint=n,{cell:l,pick:o}}}return!1},grenadeCollidesWithCell:function(e,r,i,l){var o=Collider.getCellForRay(i);if(!o)return!1;colliderMesh=o.colliderMesh,Collider.matrix.copyFrom(o.colliderMatrix),Collider.v4.set(i.x+.5,i.y+.5,i.z+.5),Collider.v1.set(e.x,e.y,e.z),Collider.v2.copyFrom(r);var t=r.length();Collider.v2.normalize().scaleInPlace(10),Collider.v1.subtractInPlace(Collider.v4),Collider.ray.origin.copyFrom(Collider.v1),Collider.ray.direction.copyFrom(Collider.v2),Collider.ray.length=1,BABYLON.Ray.TransformToRef(Collider.ray,Collider.matrix,Collider.ray);var n=Collider.intersectsColliderMesh(colliderMesh,!1);if(colliderMesh=n.pickedMesh,n.hit){if(BABYLON.Vector3.Distance(Collider.ray.origin,n.pickedPoint)<=t){Collider.matrix.invert();var d=BABYLON.Vector3.TransformCoordinates(n.pickedPoint,Collider.matrix);d.addInPlace(Collider.v4),n.pickedPoint=d;var a=BABYLON.Vector3.TransformCoordinates(n.normal,Collider.matrix),s=BABYLON.Vector3.Dot(r,a);return{cell:o,pick:n,normal:a,dot:s}}if(!n.insideMesh)return!1;var a=n.normal,n=Collider.ray.intersectsMesh(Collider.fullCollisionMesh,!1);if(n.hit){Collider.matrix.invert();var d=BABYLON.Vector3.TransformCoordinates(n.pickedPoint,Collider.matrix);d.addInPlace(Collider.v4),n.pickedPoint=d;var a=n.getNormal(!0,!1);a=BABYLON.Vector3.TransformCoordinates(a,Collider.matrix);var s=BABYLON.Vector3.Dot(r,a);return{cell:o,pick:n,normal:a,dot:s}}}return!1},intersectsColliderMesh:function(e,r){var i=1e5,l=Collider.ray.intersectsMesh(e,r),o=null,t=!1;if(l.hit){o=l.getNormal(!0,!1);var n=BABYLON.Vector3.Dot(Collider.ray.direction,o);n>0&&(t=!0),i=BABYLON.Vector3.DistanceSquared(Collider.ray.origin,l.pickedPoint)}for(var d=e.getChildMeshes(),a=0;a<d.length;a++){var s=Collider.ray.intersectsMesh(d[a],r);if(s.hit){var C=BABYLON.Vector3.DistanceSquared(Collider.ray.origin,s.pickedPoint),c=s.getNormal(!0,!1),n=BABYLON.Vector3.Dot(Collider.ray.direction,c);n>0&&(t=!0),C<i&&(i=C,l=s,o=c,n>0&&(t=!0))}}return l.normal=o,l.insideMesh=t,l},rayCollidesWithPlayer:function(e,r,i){for(var l=i?i.player.team:null,o=i?i.player.id:null,t=0;t<playerLimit;t++){var n=players[t];if(n&&n.playing&&n.id!=o&&(0==n.team||n.team!=l)){if(Collider.ray.origin.copyFrom(e),Collider.ray.direction.copyFrom(r),Collider.ray.length=1,i.actor)var d=Collider.rayCollidesWithPlayerHelper(Collider.ray,n);else{var a=i.player.serverStateIdx;Math.diff(serverStateIdx,a,stateBufferSize)>15&&(a=Math.mod(serverStateIdx-15,stateBufferSize));var d=Collider.rayCollidesWithPlayerHelper(Collider.ray,n.stateBuffer[a])}d&&i&&i.collidesWithPlayer(n,d)}}return!1},rayCollidesWithPlayerHelper:function(e,r){var i=e.origin,l=Collider.v1;l.copyFrom(i).addInPlace(e.direction);var o=Collider.v5;o.set(r.x,r.y+.32,r.z);var t=Collider.v2;t.copyFrom(e.origin),t.subtractInPlace(o);var n=BABYLON.Vector3.Dot(e.direction,e.direction),d=2*BABYLON.Vector3.Dot(e.direction,t),a=Math.pow(d,2)-4*n*(BABYLON.Vector3.Dot(t,t)-.09),s=Collider.v3,C=Collider.v4;if(a<0)return!1;if(0==a)return BABYLON.Vector3.LerpToRef(i,l,a,s),s.subtractToRef(o,C),C.normalize(),C;var c=(-d-Math.sqrt(a))/(2*n);return c>=0&&c<=1&&(BABYLON.Vector3.LerpToRef(i,l,c,s),s.subtractToRef(o,C),C.normalize(),C)}};